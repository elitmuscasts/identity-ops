#!/usr/bin/env /usr/bin/python2.7
import boto.ec2
import boto.ec2.elb
import urllib2
import sys
import logging
import json
import argparse
import textwrap

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                 epilog=textwrap.dedent('''\
Examples:
  Show all stacks
    get_hosts
  Show all hosts in a stack
    get_hosts univ -o table
  Show all webheads and keysigns in a stack in json
    get_hosts 0727 webhead keysign -o json
  Iterate over a tier of hosts
    for host in `get_hosts 0727 dbwrite`; do ssh $host 'hostname'; done
  Show all ELBs for a stack
    get_hosts -e -o table 0727
  Show the persona-org and gmail-login-persona-org ELBs for a stack
    get_hosts -e 0727 persona-org gmail-login-persona-org'''))

parser.add_argument("-v", "--verbose", help="increase output verbosity",
                    action="store_true")
parser.add_argument("-e", "--elb", help="query for Elastic Load Balancers instead of instances",
                    action="store_true")
parser.add_argument("-o", "--output", help="set the output format",
                    choices=["list","json","table"], default="list")
parser.add_argument("stack", nargs='?', help="The 4 character stack identifier")
parser.add_argument("tier", nargs='*', help="The tier or tiers that your searching for")
args = parser.parse_args()

if args.verbose:
  logging.basicConfig(level=logging.DEBUG)

my_metadata = boto.utils.get_instance_metadata()
region = my_metadata['placement']['availability-zone'][0:-1]
conn_ec2 = boto.ec2.connect_to_region(region)

my_instance_id = my_metadata['instance-id']

reservations = conn_ec2.get_all_instances(instance_ids=[my_instance_id])
my_name = reservations[0].instances[0].tags['Name']
# my_stack = reservations[0].instances[0].tags['Stack']
my_vpc = [my_metadata['network']['interfaces']['macs'][x]['vpc-id'] for x in my_metadata['network']['interfaces']['macs'].keys()]
my_vpc = my_vpc[0] if len(my_vpc) == 1 else False
if not my_vpc:
  raise Exception("The instance you're running this from appears to be in %s VPC(s). Aborting" % len(my_vpc))
my_env = reservations[0].instances[0].tags['Env']
logging.debug([my_name, my_vpc, my_env, args.stack])

if args.stack:
  output = []
  my_tiers = args.tier if len(args.tier) > 0 else False

  if args.elb:
    conn_elb = boto.ec2.elb.connect_to_region(region)
    load_balancers = conn_elb.get_all_load_balancers()
    for load_balancer in load_balancers:
      env = load_balancer.name.split('-')[-1] if load_balancer.name.split('-')[-1] in ['prod','stage','dev'] else False
      pos = -2 if env else -1
      stack = load_balancer.name.split('-')[pos]
      name = '-'.join(load_balancer.name.split('-')[0:pos])
      if stack != args.stack:
        continue
      if my_tiers and not name in my_tiers:
        continue
      output.append({"name": name,
                     "dns": load_balancer.dns_name})
    if args.output == "list":
      for i in output:
          print(i['dns'])
    elif args.output == "table":
      for i in output:
        print("{: >23} {}".format(i['name'], i['dns']))
  else:
    reservations = conn_ec2.get_all_instances(filters={'tag:App': 'identity', 
                                                       'tag:Stack' : args.stack})
    for reservation in reservations:
      for instance in [x for x in reservation.instances if x.state != 'terminated']:
    
        logging.debug(instance.tags['Name'])
  
        if my_vpc != instance.vpc_id:
            continue
        if not 'Env' in instance.tags or instance.tags['Env'] != my_env:
            continue
        #if not 'Stack' in instance.tags or instance.tags['Stack'] != args.stack:
        #    continue
        if not 'Tier' in instance.tags or (my_tiers and not instance.tags['Tier'] in my_tiers):
            continue
        output.append({"ip": instance.private_ip_address,
                       "name": instance.tags['Name'],
                       "tier": instance.tags['Tier'],
                       "id": instance.id})
    if args.output == "list":
      for i in output:
          print(i['ip'])
    elif args.output == "table":
      for i in output:
        print("{: >13} {: >10} {: >13} {}".format(i['ip'], i['id'], i['tier'], i['name']))

  if args.output == "json":
    print(json.dumps(output, sort_keys=True, indent=4, separators=(',', ': ')))


else:
  output = []
  reservations = conn_ec2.get_all_instances(filters={'tag:App': 'identity'})
  for reservation in reservations:
    for instance in reservation.instances:
      if 'Stack' in instance.tags:
        if not instance.tags['Stack'] in [x['stack'] for x in output]:
          output.append({"stack": instance.tags['Stack'],
                        "vpc": instance.vpc_id})
      
  if args.output == "list":
    for i in output:
        print(i['stack'])
  elif args.output == "json":
    print(json.dumps(output, sort_keys=True, indent=4, separators=(',', ': ')))
  elif args.output == "table":
    for i in output:
      print("{: >20} {: >20}".format(i['stack'],i['vpc']))
